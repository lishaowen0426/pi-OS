macro_rules! export_constants {
($($ident:ident = $expr: expr),*$(,)*) => {
    $(
        #[no_mangle]
        #[link_section = ".text._start_arguments"]
        pub static $ident:u64 = $expr;
    )*
};

}

export_constants!(
    CONST_EL2 = 0b1000,
    CONST_CORE_ID_MASK = 0b11,
    QEMU_CONSOLE = 0x3F201000,
    INITIAL_STACK_SIZE = 2,
    RWNORMAL = 0b0000000001100000000000000000000000000000000000000000011100000100,
    RONORMAL = 0b0000000001100000000000000000000000000000000000000000011110000100,
    XNORMAL = 0b0000000001000000000000000000000000000000000000000000011110000100,
    RWXNORMAL = 0b0000000000000000000000000000000000000000000000000000011100000100,
    RWDEVICE = 0b0000000001100000000000000000000000000000000000000000010000000000,
    RODEVICE = 0b0000000001100000000000000000000000000000000000000000010010000000,
    TABLE_ATTR = 0b0010000000000000000000000000000000000000000000000000010000000000,
    INDEX_MASK = 0b111111111,
    L1_SHIFT = 9 + 9 + 12,
    L2_SHIFT = 9 + 12,
    L3_SHIFT = 12,
    TCR_EL1_val = 0b0000000000000000000000000000000010110101000110010011010100011001, /* both ttbr0 and ttbr1
                                                                                       * are enabled, see
                                                                                       * mmu.rs */
    MAIR_EL1_val = 0b0000000000000000000000000000000000000000000000001111111100000100, /* see mmu.rs */
    SCTLR_EL1_val = 0b0000000000000000000000000000000000000000110001010001100000111101,
    HCR_EL2_val = 0b0000000000000000000000000000000010000000000000000000000000000000, /* el1 is aarch64 */
    SPSR_EL2_val = 0b0000000000000000000000000000000000000000000000000000001111000101, /* exception returns to
                                                                                        * EL1 and use SP_EL1 */
    CNTHCTL_EL2_val = 0b0000000000000000000000000000000000000000000000000000000000000011, /* access to the
                                                                                           * physical timer won't
                                                                                           * be trapped */
    CNTVOFF_EL2_val = 0b0000000000000000000000000000000000000000000000000000000000000000, /* offset between the
                                                                                           * physical and virtual
                                                                                           * count is 0 */
    KERNAL_BASE = 0xFFFFFF8000000000,
    RECURSIVE_INDEX = 511,
    STACK_PERIPHERAL_L1_INDEX = 510,
    STACK_L2_INDEX = 495,
    STACK_TOP_L3_INDEX = 510,
    DOUBLE_STACK_TOP_L3_INDEX = 511,
    PERIPHERAL_L2_INDEX = 496,
    PERIPHERAL_PHYSICAL_START = 0xFE000000,
    PERIPHERAL_PHYSICAL_END = 0xFFFFFFFF,
    PERIPHERAL_VIRTUAL_START =
        KERNAL_BASE | (STACK_PERIPHERAL_L1_INDEX << L1_SHIFT) | (PERIPHERAL_L2_INDEX << L2_SHIFT),
    PERIPHERAL_VIRTUAL_END =
        PERIPHERAL_VIRTUAL_START + (PERIPHERAL_PHYSICAL_END - PERIPHERAL_PHYSICAL_START),
    DOUBLE_STACK_TOP_VIRTUAL = KERNAL_BASE
        | (STACK_PERIPHERAL_L1_INDEX << L1_SHIFT)
        | (STACK_L2_INDEX << L2_SHIFT)
        | (DOUBLE_STACK_TOP_L3_INDEX << L3_SHIFT),
    STACK_TOP_VIRTUAL = KERNAL_BASE
        | (STACK_PERIPHERAL_L1_INDEX << L1_SHIFT)
        | (STACK_L2_INDEX << L2_SHIFT)
        | (STACK_TOP_L3_INDEX << L3_SHIFT),
);
